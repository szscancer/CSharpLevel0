<?xml version="1.0" encoding="utf-8" ?>
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd" 
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      throwConfigExceptions="true"
      autoReload="true"><!--autoReload 监控此配置文件，如有修改，会自动重新载入，从而在不重启程序的情况下使修改生效-->
  <variable name="logDirectory" value="logs/${shortdate}"/>
  <variable name="baseLevel" value="debug"/>
  <targets async="true">
    <!-- 官方文档： https://github.com/NLog/NLog/wiki/File-target
            xsi:type="File" 
            name="String" target名称
            layout="Layout" 文本的布局 默认：${longdate}|${level:uppercase=true}|${logger}|${message} 具体见：https://nlog-project.org/config/?tab=layout-renderers
            header="Layout" 日志头
            footer="Layout" 日志尾
            encoding="Encoding" 编码 默认：Encoding.Default
            lineEnding="Enum" 行结束模式
            archiveAboveSize="Long" 单个文件大小的上限，单位bytes，如果赋值，在并发写入时会大幅降低性能
            maxArchiveFiles="Integer" 文件个数的上限,如果小于等于0，不删除历史文件，默认0
            archiveFileName="Layout" 历史文件名称
            archiveNumbering="Enum" 历史文件编号模式 具体见：https://github.com/NLog/NLog/wiki/FileTarget-Archive-Examples#archive-numbering-examples
            archiveDateFormat="String" 历史文件编号的日期格式
            archiveEvery="Enum" 是否自动存档（每个特定时间段）
            archiveOldFileOnStartup="Boolean" 启动时存档历史文件
            replaceFileContentsOnEachWrite="Boolean" 每次写入时覆盖写入还是添加到文件末，默认false
            fileAttributes="Enum" 文件属性
            fileName="Layout" 文件名，可以写入多个路径（例：${level}.log）
            deleteOldFileOnStartup="Boolean" 每次启动时删除历史文件，默认false，只有在fileName指向单个文件时生效
            enableFileDelete="Boolean" 是否允许删除文件，默认true
            createDirs="Boolean" 是否允许在文件夹不存在时创建文件夹，默认true
            concurrentWrites="Boolean" 多进程并发写入，单进程设置false可提升性能；默认false
            openFileFlushTimeout="Integer" 当autoFlush为false时，帮助清空缓冲区，单位：秒，默认0
            openFileCacheTimeout="Integer" 保持文件打开状态时间（单位：秒），默认-1（即：不会关闭）
            openFileCacheSize="Integer" 同时打开的文件数量，当文件名指向多个路径时，可以提升性能，默认为5
            networkWrites="Boolean" 并发写入时，多个进程处于不同网段 默认false
            concurrentWriteAttemptDelay="Integer" 并发写入时，每次尝试写入之前的延迟最大毫秒数（每次延迟时间为从0到此值乘以concurrentWriteAttempts的随机数），默认1
            concurrentWriteAttempts="Integer" 并发写入时， 抛弃此条日志前尝试写入的次数，默认10
            bufferSize="Integer" 缓冲区大小，默认32768
            autoFlush="Boolean" 每次写入后清空缓冲区，设为false可提升性能，默认为true
            keepFileOpen="Boolean" 保持文件为打开状态，可以与openFileCacheTimeout搭配使用，避免文件句柄被锁定，默认false
            forceManaged="Boolean" 表示target仅使用托管方法
            enableArchiveFileCompression="Boolean" 是否压缩历史文件（zip）
            cleanupFileName="Boolean" 每次写入前检查文件名是否合法，设为false可提升性能，但是文件名不合法则不会写入，默认为true；
            writeFooterOnArchivingOnly="Boolean" 默认false
            writeBom="Boolean" 是否写入BOM 默认false
    -->
    <target xsi:type="File"
            name="BaseTarget"
            layout="${longdate}|${level:uppercase=true}|${logger}|${message}"
            header="GO"
            footer="END"
            encoding="Unicode"
            lineEnding="Default"
            archiveAboveSize="20971520"
            maxArchiveFiles="0"
            archiveFileName="log.{#}.txt"
            archiveNumbering="DateAndSequence"
            archiveDateFormat="yyyyMMdd"
            archiveEvery="Day"
            archiveOldFileOnStartup="false"
            replaceFileContentsOnEachWrite="false"
            fileAttributes="Archive"
            fileName="${logDirectory}/${level}.txt"
            deleteOldFileOnStartup="false"
            enableFileDelete="true"
            createDirs="true"
            concurrentWrites="false"
            openFileFlushTimeout="0"
            openFileCacheTimeout="-1"
            openFileCacheSize="5"
            networkWrites="false"
            concurrentWriteAttemptDelay="1"
            concurrentWriteAttempts="10"
            bufferSize="32768"
            autoFlush="true"
            keepFileOpen="false"
            forceManaged="false"
            enableArchiveFileCompression="false"
            cleanupFileName="true"
            writeFooterOnArchivingOnly="false"
            writeBom="false" />
  </targets>

  <rules>
    <!--<logger name="*" minLevel="${baseLevel}" writeTo="BaseTarget"/>-->
    <logger name="BaseLogger" minLevel="${baseLevel}" writeTo="BaseTarget"/>
  </rules>
</nlog>